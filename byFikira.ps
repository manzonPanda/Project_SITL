fi(ki)=>'ra' 
// © fikira This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/ 
// @version=5 

indicator("ICT Silver Bullet with signals", max_lines_count=500, max_boxes_count=500, max_labels_count=500, overlay=true)

_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                          Settings
                                                                       --------------                                                                                                                                                                                                                                                                                  '
   
tt          =                'Only include FVG in the same direction as the current trend'       
et          =                            'Extend till last bar of SB session'                   
iLastBars   = input.bool  (   false   ,          'only last x bars'          , inline='lb'                                       )
nLastBars   = input.int   (    3000   ,                   ''                 , inline='lb'                                       )
left        = input.int   (      10   ,                '',minval=1, maxval=20, inline='sw' , group='Swings settings (left-right)')
right       = input.int   (       1   ,             ''   ,minval=1, maxval= 5, inline='sw' , group='Swings settings (left-right)')

oHTF        = input.string(    '15'   ,'   HTF (minutes)',options =['1','3','5','10','15'] , group='FVG'                         )
rmvBrokeFVG = input.bool  (   true    ,         'remove broken FVG\'s'                     , group='FVG'                         )
iTrend      = input.bool  (   true    ,               '~ trend'              ,tooltip= tt  , group='FVG'                         )
extend      = input.bool  (   true    ,                'extend'              ,tooltip= et  , group='FVG'                         ) 
cBullFVG    = input.color (#4dd0e145,                   ''                 , inline='fvg', group='FVG'                         )
cBearFVG    = input.color (#ffc1b140,                   ''                 , inline='fvg', group='FVG'                         )

extendLeft  = input.bool  (   false   , 'Extend Target-lines to their source'              , group='Targets - Support/Resistance')
cSupLine    = input.color (#b22833  ,                   ''                 , inline='TG' , group='Targets - Support/Resistance')
cResLine    = input.color (#3e89fa  ,                   ''                 , inline='TG' , group='Targets - Support/Resistance')

showSB      = input.bool  (    true   ,             'SB session'             , inline='SB' , group='Show'                        )
col_SB      = input.color (#b2b5be50,                '    '               , inline='SB' , group='Show'                        )  
showZZ      = input.bool  (   false   ,                'Trend'               ,               group='Show'                        )
show_HTFc   = input.bool  (   false   ,             'HTF Candles'            ,               group='Show'                        )
show_minFr  = input.bool  (   false   ,        'Minimum Trade Framework'     ,               group='Show'                        )

_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                     Basic Calculations
                                                                 --------------------------                                                                                                                                                                                                                                                                                  '

n           = bar_index
maxSize     = 100
minT        = syminfo.mintick
colCh       = chart.fg_color
mx          = math.max(open, close)
mn          = math.min(open, close)
lastBarsBck = iLastBars ? last_bar_index - n < nLastBars : true

var l = line.new(na, na, na, na, extend=extend.both)
if iLastBars and barstate.islast 
    l.set_xy1(n - nLastBars, close), l.set_xy2(n - nLastBars, close + minT)

_                                                                                                                                                                                                                                                                                                                                                                = "
                                                                          UDT's
                                                                      ------------                                                                                                                                                                                                                                                                                  "

type bp
    int   b
    float p 

type piv 
    int   b 
    float p
    bool br

type ZZ 
    int   [] d
    int   [] x 
    float [] y 
    line  [] l

type tLine 
    line ln 
    bool act

type target 
    int   count
    tLine[] aLn

type FVG 
    box    box       
    bool   active
    box    candle1     
    box    candle2
    bool   current
    bool   broken     
    line   mTFW
    target tar

var  ZZ           aZZ         = 
 ZZ.new(
 array.new < int    >(maxSize,  0), 
 array.new < int    >(maxSize,  0), 
 array.new < float  >(maxSize, high),
 array.new < line   >(maxSize, na)
 )

var FVG[] bFVG_bull = array.new<FVG>(
 1, FVG.new(
   box    = box.new (na, na, na, na) 
 , mTFW   = line.new(na, na, na, na)  
 , current= na
 , active = na 
 , broken = na
 , tar    = target.new(count=0, aLn=array.new<tLine>())
  )
 )

var FVG[] bFVG_bear = array.new<FVG>(
 1, FVG.new(
   box    = box.new (na, na, na, na)
 , mTFW   = line.new(na, na, na, na)  
 , current= na
 , active = na 
 , broken = na
 , tar    = target.new(count=0, aLn=array.new<tLine>())
  )
 )

var        aTrend = array.from (0)

var piv   [] pivH = array.new< piv>()
var piv   [] pivL = array.new< piv>()

var piv   [] pivW = array.new< piv>()
var piv   [] pivD = array.new< piv>()

var bp    [] bpH  = array.new< bp >(1, bp.new(na, na))
var bp    [] bpL  = array.new< bp >(1, bp.new(na, na))
var line  [] l_SB = array.new<line>() 

var float friCp = na, var int friCi = na // Friday Close price/index
var float monOp = na, var int monOi = na // Monday Open  price/index

var float prDCp = na, var int prDCi = na // Previous Day Open price/index
var float cuDOp = na, var int cuDOi = na // Current  Day Open price/index

var min  = 10e6
var max  =  0.

FVGbl    = 0
cancelBl = 1
rFVGbl   = 2 
targetBl = 3
FVGbr    = 4
cancelBr = 5
rFVGbr   = 6 
targetBr = 7

signals  = array.from(false, false, false, false, false, false, false, false)

var tab  = table.new(position = position.top_right, columns = 1, rows = 1, bgcolor = color(na), border_width = 1)

_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                   General Calculations
                                                                 ------------------------                                                                                                                                                                                                                                                                                  '

ph          = ta.pivothigh(left, right)
pl          = ta.pivotlow (left, right)

_                                                                                                                                                                                                                                                                                                                                                                = "
                                                                     method/functions
                                                                  ----------------------                                                                                                                                                                                                                                                                               "

method type(string str) => 
    ( syminfo.type == 'stock'   and str == 'stock'  ) or 
     (syminfo.type == 'futures' and str == 'futures') or 
     (syminfo.type == 'index'   and str == 'index'  ) or 
     (syminfo.type == 'forex'   and str == 'forex'  ) or 
     (syminfo.type == 'crypto'  and str == 'crypto' ) or 
     (syminfo.type == 'fund'    and str == 'fund'   ) 

method timeSess(string timezone, string session) => time(timeframe.period, session, timezone) 

//Silver Bullet Periods
SB_LN_per = "America/New_York".timeSess("0300-0400") // period/session ~ The London Open Silver Bullet ( 3 AM —  4 AM New York local time)  03:00 - 04:00
SB_AM_per = "America/New_York".timeSess("1000-1100") // period/session ~ The AM  Session Silver Bullet (10 AM — 11 AM New York local time)  10:00 - 11:00
SB_PM_per = "America/New_York".timeSess("1400-1500") // period/session ~ The PM  Session Silver Bullet ( 2 PM —  3 PM New York local time)  14:00 - 15:00

SB_LN_pre = "America/New_York".timeSess("0230-0300") 
SB_AM_pre = "America/New_York".timeSess("0930-1000") 
SB_PM_pre = "America/New_York".timeSess("1330-1400") 

is_in_SB  = SB_LN_per or SB_AM_per or SB_PM_per
isPre_SB  = SB_LN_pre or SB_AM_pre or SB_PM_pre

strSBpre  = isPre_SB  and not isPre_SB [1]
strSB     = is_in_SB  and not is_in_SB [1]
strLN     = SB_LN_per and not SB_LN_per[1]
strAM     = SB_AM_per and not SB_AM_per[1]
strPM     = SB_PM_per and not SB_PM_per[1]
endSB     = not is_in_SB  and is_in_SB [1]
endLN     = not SB_LN_per and SB_LN_per[1]
endAM     = not SB_AM_per and SB_AM_per[1]
endPM     = not SB_PM_per and SB_PM_per[1]

minimum_trade_framework = 
 'forex'.type  () ? syminfo.mintick    * 15 * 10 : 
 'index'.type  () or 
 'futures'.type() ? syminfo.mintick    * 40 :  0

method in_out(ZZ aZZ, int d, int x1, float y1, int x2, float y2) =>
    aZZ.d.unshift(d), aZZ.x.unshift(x2), aZZ.y.unshift(y2), aZZ.d.pop(), aZZ.x.pop(), aZZ.y.pop()
    if showZZ
        aZZ.l.unshift(line.new(x1, y1, x2, y2, color= color.new(color.blue, 50))), aZZ.l.pop().delete()

method alert(string str) => alert(str, alert.freq_once_per_bar_close)

f_setTrend() =>
    //
    MSS_dir = aTrend.get(0)
    iH = aZZ.d.get(2) ==  1 ? 2 : 1
    iL = aZZ.d.get(2) == -1 ? 2 : 1
    //
    switch
        // MSS Bullish
        close > aZZ.y.get(iH) and aZZ.d.get(iH) ==  1 and MSS_dir <  1 =>
            aTrend.set(0,  1)
        // MSS Bearish
        close < aZZ.y.get(iL) and aZZ.d.get(iL) == -1 and MSS_dir > -1 =>
            aTrend.set(0, -1)

draw() =>
    //
    //max_bars_back(time, 1000)
    var int MSS_dir = 0
    //
    sz       =  aZZ.d.size()
    pivSzH   =   pivH.size()
    pivSzL   =   pivL.size()
    x2       =   n - right
    if ph   
        pivH.unshift(piv.new(n -right, ph))
        dir  = aZZ.d.get (0) 
        x1   = aZZ.x.get (0) 
        y1   = aZZ.y.get (0) 
        y2   =  ph
        //
        if ph > y1
            if dir <  1   // if previous point was a pl, add, and change direction ( 1)
                aZZ.in_out( 1, x1, y1, x2, y2)
            else
                if dir ==  1 
                    aZZ.x.set(0, x2), aZZ.y.set(0, y2)    
                    if showZZ
                        aZZ.l.get(0).set_xy2(x2, y2)           
    //
    if pl
        pivL.unshift(piv.new(n -right, pl))
        dir  = aZZ.d.get (0) 
        x1   = aZZ.x.get (0) 
        y1   = aZZ.y.get (0) 
        y2   =  pl
        //
        if pl < y1
            if dir > -1   // if previous point was a ph, add, and change direction (-1)
                aZZ.in_out(-1, x1, y1, x2, y2)
            else
                if dir == -1 
                    aZZ.x.set(0, x2), aZZ.y.set(0, y2)          
                    if showZZ
                        aZZ.l.get(0).set_xy2(x2, y2) 
    //  
    iH = aZZ.d.get(2) ==  1 ? 2 : 1
    iL = aZZ.d.get(2) == -1 ? 2 : 1
    //
    switch
        // MSS Bullish
        close > aZZ.y.get(iH) and aZZ.d.get(iH) ==  1 and MSS_dir <  1 =>
            MSS_dir :=  1 
        // MSS Bearish
        close < aZZ.y.get(iL) and aZZ.d.get(iL) == -1 and MSS_dir > -1 =>
            MSS_dir := -1 

    if showZZ
        if ph or pl
            aZZ.l.get(0).set_color(MSS_dir == 1 ? cResLine : cSupLine)

//NWOG/NDOG 
if dayofweek == dayofweek.friday
    friCp := close, friCi := n

if  pivW.size() > 5
    pivW.pop () 
if  pivD.size() > 5
    pivD.pop () 

if ta.change(dayofweek) 
    if  dayofweek == dayofweek.monday 
        monOp := open , monOi := n
        pivW.unshift(piv.new(monOi, monOp, false))
        pivW.unshift(piv.new(friCi, friCp, false))

    cuDOp := open    , cuDOi := n
    prDCp := close[1], prDCi := n -1
    pivD.unshift(piv.new(cuDOi, cuDOp, false))
    pivD.unshift(piv.new(prDCi, prDCp, false))

drawHTF_FVG() =>

    cTF   = math.round(timeframe.in_seconds(timeframe.period) / 60)
    m     = str.tonumber(oHTF)
    isHTF = m > cTF

    max_bars_back(mx, 3000)
    max_bars_back(mn, 3000)

    bp getH = na 
    bp getL = na 

    if strSBpre and isHTF
        bpH.unshift(bp.new(n, high))
        bpL.unshift(bp.new(n, low ))

    if (isPre_SB or is_in_SB) and lastBarsBck
        getH := isHTF ? bpH.first() : na
        getL := isHTF ? bpL.first() : na  

        if isHTF
            if high > getH.p
                getH.p := high
            if low  < getL.p
                getL.p := low
                
    if is_in_SB and lastBarsBck

        trend       = aTrend.get(0)
 
        if isHTF ? bpH.size() > 2 : true
            if (isHTF ? minute % m == 0 : true)

                hi  = isHTF ? bpH.first( ).p : high 
                lo  = isHTF ? bpL.first( ).p : low 
                hi2 = isHTF ? bpH.get  (2).p : high[2] 
                lo2 = isHTF ? bpL.get  (2).p : low [2]
                ix  = isHTF ? bpH.first( ).b : n 
                ix2 = isHTF ? bpH.get  (2).b : n   -2

                if hi < lo2 and (iTrend ? trend == -1 : true)
                    signals.set(FVGbr, true)                    
                    'Bear FVG Formed'.alert()
                    bFVG_bear.unshift(
                     FVG.new(
                      box = box.new(
                       ix2, lo2, ix, hi
                      ,border_color=color(na)
                      ,bgcolor=cBearFVG)
                     ,current= true
                     ,active = false
                     ,broken = false
                     ,tar    = target.new(
                       count = 0
                      ,aLn   = array.new<tLine>()
                       )
                      )
                     )
                    if  isHTF     and    show_HTFc
                        first          = bFVG_bear.first()
                        first.candle1 := box.new(ix2, hi2, bpH.get(1).b, lo2, bgcolor=color(na), border_color=cBearFVG)
                        first.candle2 := box.new(ix , hi ,       n     , lo , bgcolor=color(na), border_color=cBearFVG)

                if lo > hi2 and (iTrend ? trend ==  1 : true)
                    signals.set(FVGbl, true)                        
                    'Bull FVG Formed'.alert()
                    bFVG_bull.unshift(
                     FVG.new(
                      box = box.new(
                       ix2, lo, ix , hi2
                      ,border_color=color(na)
                      ,bgcolor=cBullFVG)                     
                     ,current= true
                     ,active = false
                     ,broken = false
                     ,tar    = target.new(
                       count = 0
                      ,aLn   = array.new<tLine>()
                       )
                      )
                     )
                    if  isHTF     and    show_HTFc
                        first          = bFVG_bull.first()
                        first.candle1 := box.new(ix2, lo2, bpL.get(1).b, hi2, bgcolor=color(na), border_color=cBullFVG)
                        first.candle2 := box.new(ix , lo ,      n      , hi , bgcolor=color(na), border_color=cBullFVG)

        for [i, fvg] in bFVG_bull
            if fvg.current
                fvg.box.set_right(n)
                if close < fvg.box.get_bottom()
                    signals.set(cancelBl, true)                        
                    'Bull FVG cancelled'.alert()
                    fvg.broken := true
                    if rmvBrokeFVG           
                        rmv    =              bFVG_bull  .remove(i)
                        rmv.  box  .delete(), rmv. mTFW  .delete( )
                        rmv.candle1.delete(), rmv.candle2.delete( )
                        arr = rmv.tar.aLn
                        while arr.size() > 0
                            arr.pop().ln.delete() 
                        rmv.tar.count := 0
                else
                    if not  fvg.active and
                     low  < fvg.box.get_top() 
                        signals.set(rFVGbl, true)                        
                        'Bull FVG Retrace'.alert()
                        fvg.active := true
                        diff        = close + minimum_trade_framework                         
                        if show_minFr
                            fvg.mTFW   := line.new(n, close, n, diff, width=3, color=color.new(color.blue, 65), style=line.style_arrow_right)
                        if pivH.size() > 0
                            for j = 0 to pivH.size() -1 
                                x = pivH.get(j).b
                                y = pivH.get(j).p
                                if y > diff and n - x < 4500
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=cResLine       ), true))
                                        fvg.tar.count += 1

                        if pivW.size() > 0
                            for j = 0 to pivW.size() -1 
                                x = pivW.get(j).b
                                y = pivW.get(j).p
                                if y > diff and n - x < 4500
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=colCh          ), true))
                                        fvg.tar.count += 1

                        if pivD.size() > 0
                            for j = 0 to pivD.size() -1 
                                x = pivD.get(j).b
                                y = pivD.get(j).p
                                if y > diff and n - x < 4500 
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=color.fuchsia), true))
                                        fvg.tar.count += 1

        for [i, fvg] in bFVG_bear
            if fvg.current                
                fvg.box.set_right(n)
                if close > fvg.box.get_top()                       
                    signals.set(cancelBr, true)                        
                    'Bear FVG cancelled'.alert()
                    fvg.broken := true
                    if rmvBrokeFVG                            
                        rmv    =              bFVG_bear  .remove(i)
                        rmv.  box  .delete(), rmv. mTFW  .delete( )
                        rmv.candle1.delete(), rmv.candle2.delete( )
                        arr = rmv.tar.aLn
                        while arr.size() > 0
                            arr.pop().ln.delete() 
                        rmv.tar.count := 0                        
                else 
                    if not  fvg.active and
                     high > fvg.box.get_bottom()                         
                        signals.set(rFVGbr, true)                        
                        'Bear FVG Retrace'.alert()
                        fvg.active := true                        
                        diff        = close - minimum_trade_framework 
                        if show_minFr
                            fvg.mTFW   := line.new(n, close, n, diff, width=3, color=color.new(color.blue, 65), style=line.style_arrow_right)
                        if pivL.size() > 0
                            for j = 0 to pivL.size() -1 
                                x = pivL.get(j).b
                                y = pivL.get(j).p
                                if y < diff and n - x < 4500
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=cSupLine        ), true))
                                        fvg.tar.count += 1

                        if pivW.size() > 0
                            for j = 0 to pivW.size() -1 
                                x = pivW.get(j).b
                                y = pivW.get(j).p
                                if y < diff and n - x < 4500 
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=colCh          ), true))
                                        fvg.tar.count += 1

                        if pivD.size() > 0
                            for j = 0 to pivD.size() -1 
                                x = pivD.get(j).b
                                y = pivD.get(j).p
                                if y < diff and n - x < 4500 
                                    brk = false
                                    for k = 0 to n - x
                                        if mx[k] > y and mn[k] < y 
                                            brk := true 
                                            break 
                                    if not brk
                                        fvg.tar.aLn.unshift(tLine.new(line.new(extendLeft ? x : n, y, n +5, y, color=color.fuchsia), true))
                                        fvg.tar.count += 1

    if (isPre_SB or is_in_SB) and lastBarsBck

        if minute % m == 0 and isHTF
            bpH.unshift(bp.new(n, high))
            bpL.unshift(bp.new(n, low ))

    if endSB 
        if lastBarsBck

            for i   = bFVG_bull.size( ) -1 to 0
                fvg = bFVG_bull.get (i)
                if fvg.current     
                    fvg.box.set_right(n)  
                    if not fvg.active or (rmvBrokeFVG ? fvg.broken : false) or close  <  fvg.box.get_bottom ()  
                        rmv    =              bFVG_bull  .remove(i)
                        rmv.  box  .delete(), rmv. mTFW  .delete( )
                        rmv.candle1.delete(), rmv.candle2.delete( )                    
                        signals.set(cancelBl, true)                        
                        'Bull FVG cancelled'.alert()
                        arr = rmv.tar.aLn
                        while arr.size() > 0
                            arr.pop().ln.delete() 
                        rmv.tar.count := 0

            for i   = bFVG_bear.size( ) -1 to 0                       
                fvg = bFVG_bear.get (i)
                if fvg.current                       
                    fvg.box.set_right(n)
                    if not fvg.active or (rmvBrokeFVG ? fvg.broken : false) or close  >  fvg.box.get_top    ()  
                        rmv    =              bFVG_bear  .remove(i)
                        rmv.  box  .delete(), rmv. mTFW  .delete( )
                        rmv.candle1.delete(), rmv.candle2.delete( )                        
                        signals.set(cancelBr, true)                    
                        'Bear FVG cancelled'.alert()
                        arr = rmv.tar.aLn
                        while arr.size() > 0
                            arr.pop().ln.delete() 
                        rmv.tar.count := 0

        bpH.clear(), bpH.unshift(bp.new(na, na)) 
        bpL.clear(), bpL.unshift(bp.new(na, na))

    if endSB[1] and lastBarsBck
        for [i, fvg] in bFVG_bull
            fvg.active  := false
            fvg.current := false

        for [i, fvg] in bFVG_bear
            fvg.active  := false
            fvg.current := false

_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                         Execution
                                                                      ---------------                                                                                                                                                                                                                                                                                  '
 
if  pivH.size() > maxSize
    pivH.pop () 
if  pivL.size() > maxSize
    pivL.pop () 

f_setTrend()

trend    = aTrend.get(0)

draw()

drawHTF_FVG()

if strSB
    min := 10e6
    max :=  0.
    if showSB
        l_SB.unshift(line.new(n, close, n, close + minT, color= col_SB, extend=extend.both))

if endSB
    if showSB
        l_SB.unshift(line.new (n, close, n, close + minT
                   , color= col_SB, extend=extend.both))

for [i, fvg] in bFVG_bull
    if fvg.tar.count > 0
        for tar in fvg.tar.aLn
            if tar.act
                tar.ln.set_x2(n)

                if high > tar.ln.get_y2()
                    signals.set(targetBl, true)
                    tar.act            := false
                    fvg.tar.count      -= 1                    
                    'Bull Target reached'.alert()

for [i, fvg] in bFVG_bear
    if fvg.tar.count > 0
        for tar in fvg.tar.aLn
            if tar.act
                tar.ln.set_x2(n)

                if low  < tar.ln.get_y2()                        
                    signals.set(targetBr, true)
                    tar.act            := false
                    fvg.tar.count      -= 1
                    'Bear Target reached'.alert()


_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                      plotchar/table
                                                                     ----------------                                                                                                                                                                                                                                                                                  '
 
tfs = (60 / (timeframe.in_seconds(timeframe.period) / 60)) / 2

plotchar(not na(SB_LN_per) and na(SB_LN_per[1]) and showSB
 , title= '3-4 AM' , location=location.top, text= '3-4 AM\nNY', color=color(na)
 , textcolor=col_SB, offset= +tfs)

plotchar(not na(SB_AM_per) and na(SB_AM_per[1]) and showSB
 , title='10-11 AM', location=location.top, text='10-11 AM\nNY', color=color(na)
 , textcolor=col_SB, offset= +tfs)

plotchar(not na(SB_PM_per) and na(SB_PM_per[1]) and showSB
 , title= '2-3 PM' , location=location.top, text= '2-3 PM\nNY', color=color(na)
 , textcolor=col_SB, offset= +tfs)

//plotshape(signals.get(   FVGbl), style=shape.square , location=location.abovebar, color=color.silver)
//plotshape(signals.get(cancelBl), style=shape.xcross , location=location.abovebar, color=color.red   )
//plotshape(signals.get(  rFVGbl), style=shape.circle , location=location.abovebar, color=color.lime  )
//plotshape(signals.get(targetBl), style=shape.diamond, location=location.abovebar, color=color.yellow)

//plotshape(signals.get(   FVGbr), style=shape.square , location=location.belowbar, color=color.silver)
//plotshape(signals.get(cancelBr), style=shape.xcross , location=location.belowbar, color=color.red   )
//plotshape(signals.get(  rFVGbr), style=shape.circle , location=location.belowbar, color=#FF0000     )
//plotshape(signals.get(targetBr), style=shape.diamond, location=location.belowbar, color=color.yellow)

if barstate.islast
    if timeframe.in_seconds(timeframe.period) > 15 * 60
        table.cell(tab, 0, 0, text = 'Please use a timeframe <= 15 minutes', text_color=#FF0000)


_                                                                                                                                                                                                                                                                                                                                                                = '
                                                                         Alerts
                                                                      -----------                                                                                                                                                                                                                                                                                  '
 
alertcondition(signals.get(   FVGbl), '   Bull FVG Formed'    , 'Bull FVG Formed'    )
alertcondition(signals.get(  rFVGbl), '   Bull FVG Retrace'   , 'Bull FVG Retrace'   )
alertcondition(signals.get(targetBl), '   Bull Target reached', 'Bull Target reached')
alertcondition(signals.get(cancelBl), '  Bull FVG cancelled'  , 'Bull FVG cancelled' )

alertcondition(signals.get(   FVGbr), ' Bear FVG Formed'      , 'Bear FVG Formed'    )
alertcondition(signals.get(  rFVGbr), ' Bear FVG Retrace'     , 'Bear FVG Retrace'   )
alertcondition(signals.get(targetBr), ' Bear Target reached'  , 'Bear Target reached')
alertcondition(signals.get(cancelBr), 'Bear FVG cancelled'    , 'Bear FVG cancelled' )

_                                                                                                                                                                                                                                                                                                                                                                 = '
                                                          ------------------------------------                                                                                                                                                                                                                                                                                   '
