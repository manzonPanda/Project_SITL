//@version=5
indicator(title="PROJECT SITL 2 [JAKE]", format=format.price, precision=2, timeframe="",timeframe_gaps=true)
//strategy(title="PROJECT SITL 2 [JAKE]", overlay=true,initial_capital=10000 ,currency = currency.USD, default_qty_type=strategy.cash,max_boxes_count=500)
i_pctStop = input(0.5, "% of Risk to Starting Equity Use to Size Positions") / 100
// var initialCapital = strategy.equity
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")
showDivergence = input.bool(true, title="Show Divergence", group="RSI Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

rsiPlot = plot(rsi, "RSI", color=color.purple,linewidth=2)
plot(rsiMA, "RSI-based MA", color=color.orange,linewidth=2)
rsiUpperBand = hline(70, "RSI Upper Band", color=color.green,linestyle=hline.style_dotted,linewidth=2)
midline = hline(50, "RSI Middle Band", color=color.black,linestyle=hline.style_solid)
rsiLowerBand = hline(30, "RSI Lower Band", color=color.red,linestyle=hline.style_dotted,linewidth=2)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")

midLinePlot = plot(50, color = na, editable = false, display = display.none)
fill(rsiPlot, midLinePlot, 100, 70, top_color = color.new(color.green, 0), bottom_color = color.new(color.green, 100),  title = "Overbought Gradient Fill")
fill(rsiPlot, midLinePlot, 30,  0,  top_color = color.new(color.red, 100), bottom_color = color.new(color.red, 0),      title = "Oversold Gradient Fill")

//-----------------------------------------------------------------------------}
//Variables
//-----------------------------------------------------------------------------{
n = bar_index
var bool bearishDivergenceFound = na
var int reversalFirstBearFVG = 1
tpCss  = input.color(color.new(color.teal, 50), 'TP'  , inline = 'TP and SL')
slCss  = input.color(color.new(color.red, 50), 'SL' , inline = 'TP and SL')
bullCss          = input.color(color.rgb(174,196,255), 'FVG Level'   , inline = 'bull')
bearCss          = input.color(color.red, 'FVG Level'                , inline = 'bear')
bull_fvg = low > high[2] and close[1] > high[2] and (low-high[2] >= 3*syminfo.mintick) 
bear_fvg = high < low[2] and close[1] < low[2] and (low[2]-high >= 3*syminfo.mintick)

//-----------------------------------------------------------------------------
//Functions
//-----------------------------------------------------------------------------
addToSL()=>
    if syminfo.type=="index"
        var float price = 1.3
    else if syminfo.type=="forex"
        var float price = 0.00003


// Divergence
lookbackRight = 5
lookbackLeft = 5
rangeUpper = 60
rangeLower = 5
bearColor = color.red
bullColor = color.green
textColor = color.white
noneColor = color.new(color.white, 100)

plFound = na(ta.pivotlow(rsi, lookbackLeft, lookbackRight)) ? false : true
phFound = na(ta.pivothigh(rsi, lookbackLeft, lookbackRight)) ? false : true
_inRange(cond) =>
	bars = ta.barssince(cond == true)
	rangeLower <= bars and bars <= rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish
// rsi: Higher Low

rsiHL = rsi[lookbackRight] > ta.valuewhen(plFound, rsi[lookbackRight], 1) and _inRange(plFound[1])

// Price: Lower Low

priceLL = low[lookbackRight] < ta.valuewhen(plFound, low[lookbackRight], 1)
bullCondAlert = priceLL and rsiHL and plFound
bullCond = showDivergence and bullCondAlert

plot(
     plFound ? rsi[lookbackRight] : na,
     offset=-lookbackRight,
     title="Regular Bullish",
     linewidth=2,
     color=(bullCond ? bullColor : noneColor)
     )

plotshape(
	 bullCond ? rsi[lookbackRight] : na,
	 offset=-lookbackRight,
	 title="Regular Bullish Label",
	 text=" Bull ",
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor
	 )

//------------------------------------------------------------------------------
// Regular Bearish
// rsi: Lower High

rsiLH = rsi[lookbackRight] < ta.valuewhen(phFound, rsi[lookbackRight], 1) and _inRange(phFound[1])

// Price: Higher High

priceHH = high[lookbackRight] > ta.valuewhen(phFound, high[lookbackRight], 1)

bearCondAlert = priceHH and rsiLH and phFound
if bearCondAlert 
    bearishDivergenceFound :=true
    reversalFirstBearFVG:=1

bearCond = showDivergence and bearCondAlert

plot(
	 phFound ? rsi[lookbackRight] : na,
	 offset=-lookbackRight,
	 title="Regular Bearish",
	 linewidth=2,
	 color=(bearCond ? bearColor : noneColor)
	 )

plotshape(
	 bearCond ? rsi[lookbackRight] : na,
	 offset=-lookbackRight,
	 title="Regular Bearish Label",
	 text=" Bear ",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor
	 )

// if bearishDivergenceFound and bear_fvg and strategy.opentrades == 0
//     entry_price = high
//     stopLoss=high[2]
//     addedSL= addToSL()
//     finalSL=stopLoss+addedSL 
//     takeProfit=(entry_price-finalSL)*6+entry_price //TP (RRR=4.2)
//     box.new(n +3, high, n-2, low[2], na, bgcolor = bearCss) //FVG
//     box.new(n +3, takeProfit, n+1, entry_price, na, bgcolor = tpCss) //TP (RRR=4.2)
//     box.new(n +3, finalSL, n+1, entry_price, na, bgcolor = slCss) //SL
//     sl_in_ticks=(finalSL - entry_price)/syminfo.mintick
//     tp_in_ticks=(entry_price-takeProfit)/syminfo.mintick
//     longDiffSL= math.abs(entry_price-finalSL)
//     positionValue = initialCapital * i_pctStop / (longDiffSL / entry_price)
//     positionSize = positionValue / entry_price
//     strategy.entry(id = str.tostring(n), qty=positionSize, direction = strategy.short , limit = entry_price)
//     strategy.exit(id = "Exit" , from_entry = str.tostring(n), stop = finalSL, profit = tp_in_ticks, 
//      comment_profit="TP hit",comment_loss="SL hit")
//     reversalFirstBearFVG:=  reversalFirstBearFVG-1

// if strategy.opentrades > 0
//     bearishDivergenceFound :=false


// string theMessage = (bullCondAlert) ? "Found Bullish Divergence":"Found Bearish Divergence"
alertcondition(bullCondAlert or bearCondAlert, title= "Found Divergence", message="Found Divergence")
//alertcondition(bullCondAlert, title='Regular Bullish Divergence', message="Found Bullish Divergence")
//alertcondition(bearCondAlert, title='Regular Bearish Divergence', message="Found Bearish Divergence")
