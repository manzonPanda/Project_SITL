// @version=5 
//indicator("PROJECT SITL [JAKE]", max_lines_count=500, max_boxes_count=500, max_labels_count=500, overlay=true)
strategy(title="PROJECT SITL [JAKE]", overlay=true,initial_capital=10000 ,currency = currency.USD, default_qty_type=strategy.cash)
i_pctStop = input(1., "% of Risk to Starting Equity Use to Size Positions") / 100
i_tpFactor = input(2, "Factor of stop determining target profit")
// Save the strat's equity on the first bar, which is equal to initial capital.
var initialCapital = strategy.equity

method timeSess(string timezone, string session) => time(timeframe.period, session, timezone) 
var tab  = table.new(position = position.top_right, columns = 1, rows = 1, bgcolor = color(color.rgb(2, 55, 124)), border_width = 1)

//Silver Bullet Periods
SB_AM_per = "America/New_York".timeSess("1000-1100") //period/session~The AM  Session Silver Bullet (10AMâ€”11AM New York local time)10:00 - 11:00
SB_LN_per = "America/New_York".timeSess("0300-0400")//period/session~The London Open Silver Bullet (3AMâ€”4AM New York local time)03:00 - 04:00
SB_PM_per = "America/New_York".timeSess("1400-1500") // period/session ~ The PM  Session Silver Bullet ( 2 PM â€”  3 PM New York local time)  14:00 - 15:00
//1hr before Silver Bullet Periods
HR_BEFORE_SB_AM_per = "America/New_York".timeSess("0900-1000")
HR_BEFORE_SB_LN_per = "America/New_York".timeSess("0200-0300")
HR_BEFORE_SB_PM_per = "America/New_York".timeSess("1300-1400") 
//2hrs after SB periods, close all pending order
post_SB_AM_per = "America/New_York".timeSess("1300-1359")
post_SB_LN_per = "America/New_York".timeSess("0600-0700")
post_SB_PM_per = "America/New_York".timeSess("1700-1900") 


col_SB      = input.color (#6c00d1f5,                '    '               , inline='SB' , group='Show'                        )  
minT        = syminfo.mintick

//-----------------------------------------------------------------------------}
//Variables
//-----------------------------------------------------------------------------{
tfs = (60 / (timeframe.in_seconds(timeframe.period) / 60)) / 2
is_in_SB  = SB_LN_per or SB_AM_per or SB_PM_per
is_in_hr_before_SB  = HR_BEFORE_SB_AM_per or HR_BEFORE_SB_LN_per or HR_BEFORE_SB_PM_per
strSB = is_in_SB  and not is_in_SB [1]
endSB  = not is_in_SB and is_in_SB [1]
startHrBeforeSB = is_in_hr_before_SB  and not is_in_hr_before_SB [1]
bull_fvg = low > high[2] and close[1] > high[2]
bear_fvg = high < low[2] and close[1] < low[2]
bullAreaCss      = input.color(color.new(color.teal, 50), 'Area'     , inline = 'bull')
bullCss          = input.color(color.rgb(174,196,255), 'FVG Level'   , inline = 'bull')
bearCss          = input.color(color.red, 'FVG Level'                , inline = 'bear')
tpCss  = input.color(color.new(color.teal, 50), 'TP'  , inline = 'TP and SL')
slCss  = input.color(color.new(color.red, 50), 'SL' , inline = 'TP and SL')
n = bar_index
var line highLiquidityLine = na
var line lowLiquidityLine = na 
lGcss   = input(color.rgb(255, 0, 0), '')
var float max = na
var float min = na
float barHigh = na
float barLow = na
var string pattern = na
var string patternInfo = na
var bool patternFound = na
var int firstBearFVG = 1
var int firstBullFVG = 1
var float avg = na
var bool drawDownArrow = false
var bool drawUpArrow = false
// Update times with UTC Offset - use in labels
utc_offset = input.int(-5, title="UTC Offset", minval=-12, maxval=12, tooltip="Select UTC offset for New York local time. In summer it is -4, in winter -5")
LDOAMCss  = input.color(color.new(#00bcd4, 90), '', inline = 'LDOAM', group = 'time zone')
NYLAMCss  = input.color(color.new(#00bcd4, 90), '', inline = 'NYLAM', group = 'time zone')
NYEPMCss  = input.color(color.new(#00bcd4, 90), '', inline = 'NYEPM', group = 'time zone')

LDOAM  = time(timeframe.period, "0300-0400", "UTC" + (utc_offset >= 0 ? "+" : "") + str.tostring(utc_offset)) 
NYLAM  = time(timeframe.period, "1000-1100", "UTC" + (utc_offset >= 0 ? "+" : "") + str.tostring(utc_offset)) 
NYEPM  = time(timeframe.period, "1400-1500", "UTC" + (utc_offset >= 0 ? "+" : "") + str.tostring(utc_offset)) 

//-----------------------------------------------------------------------------
//Functions
//-----------------------------------------------------------------------------
labels(session, css, txt,patternInfo)=>
    var label lbl = na
    var float max = na 
    var int anchor = na
    var get_css = color.rgb(color.r(css), color.g(css), color.b(css))

    if session and not session[1]
        max := high
        anchor := time
        
        lbl := label.new(anchor, max
          , txt
          , xloc.bar_time
          , color = #ffffff00
          , style = label.style_label_down
          , textcolor = get_css
          , size = size.large)
    
    if session
        max := math.max(high, max)
        if drawDownArrow or drawUpArrow or patternFound //update also the label text if FVG found or patternFound
            label.set_text(lbl, txt+'\n  FVG foundðŸ•˜: '+ str.format_time(time, "HH:mm z", "America/New_York")) 
        label.set_x(lbl, int(math.avg(time, anchor)))
        label.set_y(lbl, (syminfo.type=="index") ?  max+5:max+0.00005 )

addToSL()=>
    if syminfo.type=="index"
        var float price = 1.3
    else if syminfo.type=="forex"
        var float price = 0.00005

addSpreads()=>
    if syminfo.type=="index"
        var float price = 1
    else if syminfo.type=="forex"
        var float price = 0.00005

if startHrBeforeSB //find max and min 1hr before SB
    max := high //for getting the highest price 1hr before session
    min := low //for getting the lowest price 1hr before session
    //initiate liquidity lines with na first
    highLiquidityLine:= line.new(n,na,na,na, color = lGcss, style = line.style_dotted, width = 3)
    lowLiquidityLine:= line.new(n,na,na,na, color = lGcss, style = line.style_dotted, width = 3)
    patternFound:= false
    pattern:="na"
    patternInfo:=""

if strSB
    line.new(bar_index, close, bar_index, close + 10, color= col_SB, extend=extend.both,width = 3)
    //extend lines of liquidity grabs to SB session
    line.set_y1(highLiquidityLine, max) 
    line.set_xy2(highLiquidityLine, n+59, max)
    line.set_y1(lowLiquidityLine, min) 
    line.set_xy2(lowLiquidityLine, n+59, min)
if endSB
    line.new(bar_index, close, bar_index, close + 10, color= col_SB, extend=extend.both,width = 3)
    //patternFound:= false

if is_in_hr_before_SB
    tempMax = math.max(high, max) //check if there is a new high
    tempMin = math.min(low, min) //check if there is a new low
    max:=tempMax
    min:=tempMin
    line.set_y1(highLiquidityLine, max) 
    line.set_xy2(highLiquidityLine, n, max)
    line.set_y1(lowLiquidityLine, min) 
    line.set_xy2(lowLiquidityLine, n, min)
    firstBearFVG:=1
    firstBullFVG:=1

//draw FVGs only in the inside of SB timezone
if is_in_SB
    if low<min and not patternFound
        pattern:="Reversal-below"
        patternInfo:= ' ('+str.tostring(low) +'<' + str.tostring(min) +')'
        patternFound:=true
    if high>max and not patternFound
        pattern:="Reversal-top"
        patternInfo:= ' ('+ str.tostring(high) +'>' + str.tostring(max) +')'
        patternFound:=true

    // *** Risk management sample*** //
    //entry_price = close 
    //percent_diff = 5
    //rrr = 2
    //stop_loss_price = (1 percent_diff / 100.) entry_price
    //take_profit_price = (1 + rrr * percent_diff / 100.) * entry_price
    //SL in ticks = (entry_price - stop_loss_price)/syminfo.mintick
    //TP in ticks =(take_profit_price - entry_price)/syminfo.mintick
    //***************************//

    if patternFound and pattern=="Reversal-below" 
        if bull_fvg and firstBullFVG !=0
            drawUpArrow:= true
            entry_price = low //use this if you want your entry ABOVE the upper base of FVG (for spreads)
            //entry_price = low //use this if you want your entry in the upper base of FVG
            //entry_price = math.avg(low,high[2]) //use this if you want your entry in the middle of FVG
            stopLoss=low[2]
            addedSL= addToSL()
            finalSL=stopLoss-addedSL 
            takeProfit=(entry_price-finalSL)*2+entry_price //TP (RRR=1.5)
            box.new(n +3, low, n-2, high[2], na, bgcolor = bullCss) //FVG
            box.new(n +3, takeProfit, n+1, entry_price, na, bgcolor = tpCss) //TP (RRR=3)
            box.new(n +3, finalSL, n+1, entry_price, na, bgcolor = slCss) //SL
            sl_in_ticks=(finalSL - entry_price)/syminfo.mintick
            tp_in_ticks=(takeProfit-entry_price)/syminfo.mintick
            longDiffSL= math.abs(entry_price-finalSL)
            positionValue = initialCapital * i_pctStop / (longDiffSL / entry_price)
            positionSize = positionValue / entry_price
            strategy.entry(id = str.tostring(n), qty=positionSize, direction = strategy.long , limit = entry_price, comment = "entered at "+str.tostring(entry_price))
            strategy.exit(id = "Exit" , from_entry = str.tostring(n), stop = finalSL, profit = tp_in_ticks, 
             comment_profit="TP hit @ "+str.tostring(takeProfit),comment_loss="SL hit @ "+str.tostring(finalSL) )
            firstBullFVG:= firstBullFVG-1

    if patternFound and pattern=="Reversal-top"
        if bear_fvg and firstBearFVG !=0
            drawDownArrow := true
            entry_price = high //use this if you want your entry ABOVE the upper base of FVG (for spreads)
            //entry_price = high //use this if you want your entry in the lower base of FVG
            //entry_price = math.avg(high,low[2]) //use this if you want your entry in the middle of FVG
            stopLoss=high[2] //tick of the first bar 
            addedSL= addToSL()
            finalSL=stopLoss+addedSL 
            takeProfit=(entry_price-finalSL)*2+entry_price //TP (RRR=1.5)
            box.new(n +3, high, n-2, low[2], na, bgcolor = bearCss) //FVG
            box.new(n +3, takeProfit, n+1, entry_price, na, bgcolor = tpCss) //TP (RRR=3)
            box.new(n +3, finalSL, n+1, entry_price, na, bgcolor = slCss) //SL
            sl_in_ticks=(finalSL - entry_price)/syminfo.mintick
            tp_in_ticks=(entry_price-takeProfit)/syminfo.mintick
            longDiffSL= math.abs(entry_price-finalSL)
            positionValue = initialCapital * i_pctStop / (longDiffSL / entry_price)
            positionSize = positionValue / entry_price
            strategy.entry(id = str.tostring(n), qty=positionSize, direction = strategy.short , limit = entry_price, comment = "entered at "+str.tostring(entry_price))
            strategy.exit(id = "Exit" , from_entry = str.tostring(n), stop = finalSL, profit = tp_in_ticks, 
             comment_profit="TP hit @ "+str.tostring(takeProfit),comment_loss="SL hit @ "+str.tostring(finalSL) )
            firstBearFVG:=  firstBearFVG-1
            
if post_SB_AM_per or  post_SB_LN_per or post_SB_PM_per //cancel pending orders after 2hrs
    strategy.cancel_all() 

plotchar(
 series     = not na(SB_LN_per) and na(SB_LN_per[1]),
 title      = "3-4 AM ",
 //char       = " ",
 location   =  location.top,
 color      = color.new(color = color.red , transp = 30),
 offset     = +tfs,
 text       = "3-4 AM\nNY\nBy Jake",
 textcolor  = color.new(color = color.purple , transp = 30)
 //editable   =  ,
 //size       =  ,
 //show_last  = ,
 //display    =  
 )

//-----------------------------------------------------------------------------
//Labels
//-----------------------------------------------------------------------------
labels(LDOAM, LDOAMCss, '3:00-4:00 AM \n Pattern found: '+pattern + patternInfo + '\n Max: '+str.tostring(max)+ '\n Min: '+str.tostring(min),patternInfo)
labels(NYLAM, NYLAMCss, '10:00-11:00 AM \n Pattern found: '+pattern + patternInfo + '\n Max: '+str.tostring(max)+ '\n Min: '+str.tostring(min),patternInfo)
labels(NYEPM, NYEPMCss, '2:00-3:00 PM \n Pattern found: '+pattern + patternInfo  + '\n Max: '+str.tostring(max)+ '\n Min: '+str.tostring(min),patternInfo)
plotchar(series=drawDownArrow, title="drawDownArrow", color=color.red, char='â¬‡', size=size.normal,location=location.abovebar)
plotchar(series=drawUpArrow, title="drawUpArrow", color=color.green, char='â¬†', size=size.normal, location=location.belowbar)
drawDownArrow := false
drawUpArrow := false

//display info on the upper right corner
if barstate.islast
    if timeframe.in_seconds(timeframe.period) > 15 * 60
        true

//table.cell(tab, 0, 0, text = 'Max: '+max , text_color=#fcfcfc)
table.cell(tab, 0, 0, text = 'Project SITL [Jake]' + '\n Date: Nov. 8, 2023'+ '\nType: ' + str.tostring(syminfo.type) + '\n mintick: '+str.tostring(syminfo.mintick), text_color=#fcfcfc)

